{
  "author": {
    "name": "Jérémy Lal",
    "email": "kapouer@melix.org"
  },
  "name": "express-notemplate",
  "description": "Express view engine, merges data into DOM using plain JS",
  "keywords": [
    "template",
    "DOM",
    "asynchronous",
    "cache"
  ],
  "version": "0.1.3",
  "repository": {
    "type": "git",
    "url": "git://github.com/kapouer/express-notemplate.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "dependencies": {
    "express": "3.0.x",
    "jsdom": "https://github.com/kapouer/jsdom/tarball/master",
    "jquery-browser": ">=1.7.2-3 <1.8",
    "async": "0.1.x"
  },
  "main": "./notemplate.js",
  "readme": "express-notemplate\n==================\n\nLet the template be plain HTML code, and use javascript to merge data into it.\n\nWhy ?\n-----\n\nThe view is totally separated from the model.\nThe glue code that merges data into the view is easy to maintain, and can be run by the server or the clients.\nThere is no artificial syntax, no unnecessary abstraction.\nJust familiar DOM and javascript.\n\nIn particular, this allows one to merge new data on the clients using a messenging system using the exact same code\nas what is needed on the server to output html.\n\nThe only extra is a jQuery $ object provided by default on server.\n(if the javascript code is not used on clients, jQuery is not needed on clients).\n\n\nExpress 3 Setup\n---------------\n\n\tvar notemplate = require('express-notemplate');\n\tapp.set('statics', process.cwd() + '/public');\n\tapp.set('views', process.cwd() + '/views');\n\tapp.engine('html', notemplate.__express);\n\tapp.set('view engine', 'html');\n\tapp.use(express.static(app.get('statics')));\n\n\nUsage\n-----\n\nIt is meant to be used as any other express view rendering :\n\n\tres.locals.mydata = mydata;\n\tres.render('index');\n\nThen express-notemplate will load the html file into a DOM, add window.$ to it, and process script tags :\n\n\t<script type=\"text/javascript\">\n\t\t// some client code here, won't be run on server\n\t</script>\n\t<script type=\"text/javascript\" notemplate=\"both\" src=\"javascripts/moment.js\"></script>\n\t<script type=\"text/javascript\" notemplate=\"server\">\n\t\t$(document).on('data', function(e, data) {\n\t\t\t$('head > title').text(data.mydata.title + moment());\n\t\t});\n\t</script>\n\t<script type=\"text/javascript\" notemplate=\"both\">\n\t\t$(document).on('data', function(e, data) {\n\t\t\t$('body').html(data.mydata.body);\n\t\t});\n\t</script>\n\n\nIn this example :\n\n* moment.js is loaded and the script tag is kept in the html output,\n* the first handler is run on server but won't be available on client\n* the second handler is run and it will be possible to trigger it on client too.\n\nscript tags can have attribute notemplate = server | client | both :\n\n* (default) client : script are not run\n* server : scripts are run and tag is removed\n* both : scripts are run\n\nThe \"notemplate\" attribute is removed from html output.\n\n\nMiddleware\n----------\n\nAside from page-bound scripts for merging data, there are several 'global'\nevents that can be listened to :\n\n\t* ready\t\tpage DOM loaded in view.window - jquery and other scripts are available, as usual\n\t\tListener arguments : view, opts\n\t* data\t\tcalled before any page-bound handlers, all page-bound scripts being loaded\n\t\tListener arguments : view, opts\n\t* render\tcalled after page-bound handlers\n\t\tListener arguments : view, opts\n\t* output\tcalled after DOM is serialized to xhtml string\n\t\tListener argument : { output : <str> }, opts\n\n\nUsage :\n\n\tview.window\n\tview.window.$\n\tview.window.document\n\tview.window.console\n\n\topts.settings.env\n\topts.locals.mydata\n\topts.mydata\n\topts.use(...)\n\t\t\n\n\tvar notemplate = require('express-notemplate');\n\t../..\n\tnotemplate.on('output', function(ref) {\n\t\tref.output = ref.output.replace('é', '&eacute;');\n\t});\n\nA typical use of middleware is in notemplate-minify.\n\n\nFeatures\n--------\n\n* console.log works in the jsdom context.\n",
  "readmeFilename": "README.md",
  "_id": "express-notemplate@0.1.3",
  "dist": {
    "shasum": "dc8051a109c4d5f7d1e62314c6a2895d49ce2774"
  },
  "_from": "express-notemplate"
}
